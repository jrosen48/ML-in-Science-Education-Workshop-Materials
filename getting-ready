---
title: "Independent Practice"
output: html_document
name: ""
editor_options: 
  markdown: 
    wrap: 72
---

{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)

Welcome to using R! You may have used R before-or you may not have! Either is fine as this task will be designed with the assumption that you have not used R before, but it includes "reaches" for anyone who may want to do a bit more.

A bit of background: We're using RStudio Cloud, which has all of the functionality of the desktop version of RStudio, and some additional benefits for the workshop, specifically around the installation of packages. If you wish to use RStudio desktop, you can download this project (see the File pane in the lower right corner - click "More") and click the project.Rproj file to open it in your desktop version.

This independent practice is really a warm-up - a chance to become familiar with a data set that we will be using and to become familiar with how RStudio works. In the context of doing so, we'll focus on three things:

Reading data into R

Preparing and "wrangling" data in table (think spreadsheet!) format

Creating some plots

The document is organized accordingly.

1. Reading data into R

R uses "packages," add-ons that enhance its functionality. One package that we'll be using is the tidyverse. To load the tidyverse, click the green arrow in the right corner of the block-or "chunk"-of code that follows.

{r}
library(tidyverse)

Please do not worry if you saw a number of messages: those probably mean that the tidyverse loaded just fine. If you see an error, though, try to interpret or search via your search engine the contents of the error, or reach out to the instructor (jmrosenberg@utk.edu) for assistance!

Next, we'll load data-specifically, a CSV file, the kind that you can export from Microsoft Excel or Google Sheets - into R, using the read_csv() function in the next chunk.

Clicking the green arrow runs the code; do that next.

{r}
d <- read_csv("sci-online-classes.csv")

Last, let's check that the code worked as we intended; run the next chunk and look at the results, tabbing left or right with the arrows, or scanning through the rows by clicking the numbers at the bottom of the pane with the print-out of the data you loaded:

{r}
d

What do you notice about this data set? What do you wonder? Add one-two thoughts following the dashes next (you can add additional dashes if you like!):

We have one more question to pose to you: What do rows and columns typically represent in your area of work and/or research?

Generally, rows typically represent "cases," the units that we measure, or the units on which we collect data. This is not a trick question! What counts as a "case" (and therefore what is represented as a row) varies by (and within) fields. There may be multiple types or levels of units studied in your field; listing more than one is fine! Also, please consider what columns - which usually represent variables - represent in your area of work and/or research.

What rows typically (or you think may) represent:

What columns typically (or you think may) represent:

2. Prepare data in table form

Next, we'll use a few functions that are handy for preparing data in table form.

Selecting variables

Let's select only a few variables.

{r}
d %>% 
  select(student_id, total_points_possible, total_points_earned)

Notice how the number of columns (variables) is now different.

Let's include one additional variable in your select function.

First, we need to figure out what variables exist in our dataset (or be reminded of this - it's very common in R to be continually checking and inspecting your data)!

You can use a function named glimpse() to do this.

{r}
glimpse(d)

In the code chunk below, add a new variable to the code below, being careful to type the new variable name as it appears in the data. We've added some code to get you started. Consider how the names of the other variables are separated as you think about how to add an additional variable to this code.

{r}
d %>% 
  select(student_id, total_points_possible, total_points_earned)

Once added, the output should be different than in the code above - there should now be an additional variable included in the print-out.

Filtering variables

Next, let's explore filtering variables. Check out and run the next chunk of code, imagining that we wish to filter our data to view only the rows associated with students who earned a final grade (as a percentage) of 70 - 70% - or higher.

{r}
d %>% 
  filter(FinalGradeCEMS > 70)

In the next code chunk, change the cut-off from 70% to some other value - larger or smaller (maybe much larger or smaller - feel free to play around with the code a bit!).

{r}
d %>% 
  filter(FinalGradeCEMS > 70)

What happens when you change the cut-off from 70 to something else? Add a thought (or more):

Arrange

The last function we'll use for preparing tables is arrange.

We'll combine this arrange() function with a function we used already - select(). We do this so we can view only the student ID and their final grade.

{r}
d %>% 
  select(student_id, FinalGradeCEMS) %>% 
  arrange(FinalGradeCEMS)

Note that arrange works by sorting values in ascending order (from lowest to highest); you can change this by using the desc() function with arrange, like the following:

{r}
d %>% 
  select(student_id, FinalGradeCEMS) %>% 
  arrange(desc(FinalGradeCEMS))

In the code chunk below, replace FinalGradeCEMS that is used with both the select() and arrange() functions with a different variable in the data set. Consider returning to the code chunk above in which you glimpsed at the names of all of the variables.

{r}
d %>% 
  select(student_id, FinalGradeCEMS) %>% 
  arrange(desc(FinalGradeCEMS))

Reach 1

Can you compose a series of functions that include the select(), filter(), and arrange functions? Recall that you can "pipe" the output from one function to the next as when we used select() and arrange() together in the code chunk above.

This reach is not required/necessary to complete; it's just for those who wish to do a bit more with these functions at this time (we'll do more in class, too!)

{r}


3. Create plots

Lastly, we will create a few plots.

The code below creats a histogram, or a distribution of the values, in this case for students' final grades.

{r}
ggplot(d, aes(x = FinalGradeCEMS)) +
  geom_histogram()

You can change the color of the histogram bars by specifying a color as follows:

{r}
ggplot(d, aes(x = FinalGradeCEMS)) +
  geom_histogram(fill = "blue")

In the code chunk below, change the color to one of your choosing; consider this list of valid color names here: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf

{r}
ggplot(d, aes(x = FinalGradeCEMS)) +
  geom_histogram(fill = "blue")

Finally, we'll make one more change; visualize the distribution of another variable in the data - one other than FinalGradeCEMS. You can do so by swapping out the name for another variable with FinalGradeCEMS. Also, change the color to one other than blue.

{r}
ggplot(d, aes(x = FinalGradeCEMS)) +
  geom_histogram(fill = "blue")

Reach 2

Completed the above? Nice job! Try for a "reach" by creating a scatter plot for the relationship between two variables. You will need to pass the names of two variables to the code below for what is now simply XXX (a placeholder).

{r}
ggplot(d, aes(x = XXX, y = XXX)) +
  geom_point()

fin

Great job! Once you've finished your work, click "Knit" at the top to render a report that you can share. You may wish to "Knit to PDF"; click the small downward-pointing arrow to Knit to that output format (rather than to HTML, the default).
